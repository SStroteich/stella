# include "define.inc"

!
! special function wrapper routine written by Tomo Tatsuno (5/7/08)
! only has Bessel function at the moment
!
! RN 2008/07/01: Error function is added
! RN 2008/07/01: Compilers not having intrinsic those special functions
!                must choose one of the following
!                 1: local [USE_LOCAL_SPFUNC=on]
!                 2: NAG Library [USE_NAGLIB=spfunc]
!
! Unfortunately we do not support elemental feature for ifort...
! XL-fortran does not seem to have intrinsic Bessel function
!
! To do: avoid explicit specification of kind and use kind_rs or kind_rd
!        support of other compilers such as absoft, lahay etc...
!
! PGI cannot use kind_rs, kind_rd as kind specifications, but it is ok
! because we know kind_rs=4 kind_rd=8 for PGI
!

module spfunc
   use constants, only: kind_rs, kind_rd
# if SPFUNC == _SPNAG_
   use constants, only: nag_kind
# endif

   implicit none

   public :: j0, j1, i0
   public :: erf_ext

   private

# if SPFUNC == _SPNAG_

   ! error handling
   ! ifail=0: terminate the program
   ! ifail=1 (-1): continues the program w/o (w) error messages
   integer :: ifail = -1

# endif

# if SPFUNC == _SPLOCAL_
# elif SPFUNC == _SPNAG_
# else /* if not _SPLOCAL_ and not _SPNAG_ */
# if (FCOMPILER == _GFORTRAN_ || FCOMPILER == _INTEL_ \
   ||FCOMPILER == _PATHSCALE_)

   interface j0
      module procedure sj0, dj0
   end interface
   interface j1
      module procedure sj1, dj1
   end interface
   interface erf_ext
      module procedure serf_ext, derf_ext
   end interface

# elif FCOMPILER == _G95_ /* not _GFORTRAN_, _INTEL_, _PATHSCALE_ */

   interface j0
      module procedure sj0, dj0
   end interface
   interface j1
      module procedure sj1, dj1
   end interface

# elif FCOMPILER == _PGI_ /* not _GFORTRAN_, _INTEL_, _PATHSCALE_, _G95_ */

   interface j0
      elemental function besj0(x)
         real(kind=4), intent(in) :: x
         real(kind=4) :: besj0
      end function besj0
      elemental function dbesj0(x)
         real(kind=8), intent(in) :: x
         real(kind=8) :: dbesj0
      end function dbesj0
   end interface
   ! j1 is below

   interface erf_ext
      elemental function erf(x)
         real(kind=4), intent(in) :: x
         real(kind=4) :: erf
      end function erf
      elemental function derf(x)
         real(kind=8), intent(in) :: x
         real(kind=8) :: derf
      end function derf
   end interface

# endif /* FCOMPILER */
# endif /* SPFUNC */

contains

   !Bessel I_0(x) function in double precision
   !-------------------------------------------------------------------------!
   ! double precision modified Bessel function                    !
   ! http://www.kurims.kyoto-u.ac.jp/~ooura/bessel.html                      !
   !-------------------------------------------------------------------------!
   ! Copyright(C) 1996 Takuya OOURA (email: ooura@mmm.t.u-tokyo.ac.jp).      !
   ! You may use, copy, modify this code for any purpose and                 !
   ! without fee. You may distribute this ORIGINAL package.                  !
   !-------------------------------------------------------------------------!
   ! Modified by Ryusuke NUMATA 2008/06/27                                   !
   !  to fit F90 format, and for j1 to give besj1/x                          !
   !-------------------------------------------------------------------------!

      elemental function i0(x)

      real :: i0
      real, intent(in) :: x
      integer :: k
      real :: w, t, y

      real, parameter :: a(0:64) = (/ & 
     &    8.5246820682016865877d-11, 2.5966600546497407288d-9, &
     &    7.9689994568640180274d-8, 1.9906710409667748239d-6, &
     &    4.0312469446528002532d-5, 6.4499871606224265421d-4, &
     &    7.9012345761930579108d-3, 7.1111111109207045212d-2, &
     &    4.4444444444472490900d-1, 1.7777777777777532045d0, &
     &    4.0000000000000011182d0, 3.9999999999999999800d0, &
     &    1.0000000000000000001d0, 1.1520919130377195927d-10, &
     &    2.2287613013610985225d-9, 8.1903951930694585113d-8, &
     &    1.9821560631611544984d-6, 4.0335461940910133184d-5, &
     &    6.4495330974432203401d-4, 7.9013012611467520626d-3, &
     &    7.1111038160875566622d-2, 4.4444450319062699316d-1, &
     &    1.7777777439146450067d0, 4.0000000132337935071d0, &
     &    3.9999999968569015366d0, 1.0000000003426703174d0, &
     &    1.5476870780515238488d-10, 1.2685004214732975355d-9, & 
     &    9.2776861851114223267d-8, 1.9063070109379044378d-6, & 
     &    4.0698004389917945832d-5, 6.4370447244298070713d-4, & 
     &    7.9044749458444976958d-3, 7.1105052411749363882d-2, & 
     &    4.4445280640924755082d-1, 1.7777694934432109713d0, & 
     &    4.0000055808824003386d0, 3.9999977081165740932d0, & 
     &    1.0000004333949319118d0,  2.0675200625006793075d-10, &
     &   -6.1689554705125681442d-10, 1.2436765915401571654d-7, &
     &    1.5830429403520613423d-6, 4.2947227560776583326d-5, &
     &    6.3249861665073441312d-4, 7.9454472840953930811d-3, &
     &    7.0994327785661860575d-2, 4.4467219586283000332d-1, &
     &    1.7774588182255374745d0, 4.0003038986252717972d0, &
     &    3.9998233869142057195d0, 1.0000472932961288324d0, &
     &    2.7475684794982708655d-10, -3.8991472076521332023d-9, & 
     &    1.9730170483976049388d-7, 5.9651531561967674521d-7, & 
     &    5.1992971474748995357d-5, 5.7327338675433770752d-4, & 
     &    8.2293143836530412024d-3, 6.9990934858728039037d-2, & 
     &    4.4726764292723985087d-1, 1.7726685170014087784d0, & 
     &    4.0062907863712704432d0, 3.9952750700487845355d0, & 
     &    1.0016354346654179322d0/) 

      real, parameter :: b(0:69) = (/ &
     &    6.7852367144945531383d-8, 4.6266061382821826854d-7, & 
     &    6.9703135812354071774d-6, 7.6637663462953234134d-5, & 
     &    7.9113515222612691636d-4, 7.3401204731103808981d-3, & 
     &    6.0677114958668837046d-2, 4.3994941411651569622d-1, & 
     &    2.7420017097661750609d0, 14.289661921740860534d0, & 
     &    59.820609640320710779d0, 188.78998681199150629d0, & 
     &    399.87313678256011180d0, 427.56411572180478514d0, & 
     &    1.8042097874891098754d-7, 1.2277164312044637357d-6, & 
     &    1.8484393221474274861d-5, 2.0293995900091309208d-4, & 
     &    2.0918539850246207459d-3, 1.9375315654033949297d-2, & 
     &    1.5985869016767185908d-1, 1.1565260527420641724d0, & 
     &    7.1896341224206072113d0, 37.354773811947484532d0, & 
     &    155.80993164266268457d0, 489.52113711585409180d0, & 
     &    1030.9147225169564806d0, 1093.5883545113746958d0, & 
     &    4.8017305613187493564d-7, 3.2613178439123800740d-6, & 
     &    4.9073137508166159639d-5, 5.3806506676487583755d-4, & 
     &    5.5387918291051866561d-3, 5.1223717488786549025d-2, & 
     &    4.2190298621367914765d-1, 3.0463625987357355872d0, & 
     &    18.895299447327733204d0, 97.915189029455461554d0, & 
     &    407.13940115493494659d0, 1274.3088990480582632d0, & 
     &    2670.9883037012547506d0, 2815.7166284662544712d0, & 
     &    1.2789926338424623394d-6, 8.6718263067604918916d-6, & 
     &    1.3041508821299929489d-4, 1.4282247373727478920d-3, & 
     &    1.4684070635768789378d-2, 1.3561403190404185755d-1, & 
     &    1.1152592585977393953d0, 8.0387088559465389038d0, & 
     &    49.761318895895479206d0, 257.26842323135291380d0, & 
     &    1066.8543146269566231d0, 3328.3874581009636362d0, & 
     &    6948.8586598121634874d0, 7288.4893398212481055d0, & 
     &    3.4093503681970328930d-6, 2.3079025203103376076d-5, & 
     &    3.4691373283901830239d-4, 3.7949949772229085450d-3, & 
     &    3.8974209677945602145d-2, 3.5949483804148783710d-1, & 
     &    2.9522878893539528226d0, 21.246564609514287056d0, & 
     &    131.28727387146173141d0, 677.38107093296675421d0, & 
     &    2802.3724744545046518d0, 8718.5731420798254081d0, & 
     &    18141.348781638832286d0, 18948.925349296308859d0/) 

      real, parameter :: c(0:44) = (/ & 
     &    2.5568678676452702768d-15, 3.0393953792305924324d-14, &
     &    6.3343751991094840009d-13, 1.5041298011833009649d-11, &
     &    4.4569436918556541414d-10, 1.7463930514271679510d-8, &
     &    1.0059224011079852317d-6, 1.0729838945088577089d-4, &
     &    5.1503226936425277380d-2, 5.2527963991711562216d-15, &
     &    7.2021184814210056410d-15, 7.2561421229904797156d-13, &
     &    1.4823121466731042510d-11, 4.4602670450376245434d-10, &
     &    1.7463600061788679671d-8, 1.0059226091322347560d-6, &
     &    1.0729838937545111487d-4, 5.1503226936437300716d-2, & 
     &    1.3365917359358069908d-14, -1.2932643065888544835d-13, & 
     &    1.7450199447905602915d-12, 1.0419051209056979788d-11, & 
     &    4.5804788198059832600d-10, 1.7442405450073548966d-8, & 
     &    1.0059461453281292278d-6, 1.0729837434500161228d-4, & 
     &    5.1503226940658446941d-2, 5.3771611477352308649d-14, &
     &    -1.1396193006413731702d-12, 1.2858641335221653409d-11, &
     &    -5.9802086004570057703d-11, 7.3666894305929510222d-10, &
     &    1.6731837150730356448d-8, 1.0070831435812128922d-6, &
     &    1.0729733111203704813d-4, 5.1503227360726294675d-2, & 
     &    3.7819492084858931093d-14, -4.8600496888588034879d-13, &
     &    1.6898350504817224909d-12, 4.5884624327524255865d-11, &
     &    1.2521615963377513729d-10, 1.8959658437754727957d-8, &
     &    1.0020716710561353622d-6, 1.0730371198569275590d-4, &
     &    5.1503223833002307750d-2 /) 

      w = abs(x)
      if (w .lt. 8.5d0) then
          t = w * w * 0.0625d0
          k = 13 * (int(t))
          y = (((((((((((a(k) * t + a(k + 1)) * t + & 
                a(k + 2)) * t + a(k + 3)) * t + a(k + 4)) * t + & 
                a(k + 5)) * t + a(k + 6)) * t + a(k + 7)) * t + &
                a(k + 8)) * t + a(k + 9)) * t + a(k + 10)) * t + &
                a(k + 11)) * t + a(k + 12)
      else if (w .lt. 12.5d0) then
          k = int(w)
          t = w - k
          k = 14 * (k - 8)
          y = ((((((((((((b(k) * t + b(k + 1)) * t + &
               & b(k + 2)) * t + b(k + 3)) * t + b(k + 4)) * t + &
               & b(k + 5)) * t + b(k + 6)) * t + b(k + 7)) * t + &
               & b(k + 8)) * t + b(k + 9)) * t + b(k + 10)) * t + &
               & b(k + 11)) * t + b(k + 12)) * t + b(k + 13)
      else
          t = 60 / w
          k = 9 * (int(t))
          y = ((((((((c(k) * t + c(k + 1)) * t + &
               &  c(k + 2)) * t + c(k + 3)) * t + c(k + 4)) * t + &
               &  c(k + 5)) * t + c(k + 6)) * t + c(k + 7)) * t + &
               &  c(k + 8)) * sqrt(t) * exp(w)
      end if
      i0 = y

    end function i0


   ! Bessel I_1(x) function in double precision
   !-------------------------------------------------------------------------!
   ! double precision modified Bessel function                    !
   ! http://www.kurims.kyoto-u.ac.jp/~ooura/bessel.html                      !
   !-------------------------------------------------------------------------!
   ! Copyright(C) 1996 Takuya OOURA (email: ooura@mmm.t.u-tokyo.ac.jp).      !
   ! You may use, copy, modify this code for any purpose and                 !
   ! without fee. You may distribute this ORIGINAL package.                  !
   !-------------------------------------------------------------------------!
   ! Modified by Ryusuke NUMATA 2008/06/27                                   !
   !  to fit F90 format, and for j1 to give besj1/x                          !
   !-------------------------------------------------------------------------!
   elemental function i1(x)
      
      real :: i1
      real, intent(in) :: x
      integer :: k
      real :: w, t, y
      real, parameter :: a(0:59) = (/ & 
     &    1.2787464404046789181d-10, 3.5705860060088241077d-9, &
     &    9.9611537619347335040d-8, 2.2395070088633043177d-6, &
     &    4.0312466928887462346d-5, 5.6437387840203722356d-4, &
     &    5.9259259312934746096d-3, 4.4444444443499008870d-2, &
     &    2.2222222222232042719d-1, 6.6666666666666139867d-1, &
     &    1.0000000000000001106d0, 4.9999999999999999962d-1, &
     &    1.7281952384448634449d-10, 3.0647204559976390130d-9, & 
     &    1.0237662138842827028d-7, 2.2299494417341498163d-6, &
     &    4.0335364374929326943d-5, 5.6433440269141349899d-4, &
     &    5.9259754885893798654d-3, 4.4444399410880397870d-2, &
     &    2.2222225112835026730d-1, 6.6666665422146063244d-1, &
     &    1.0000000032274936821d0, 4.9999999961866867205d-1, & 
     &    2.3216048939948030996d-10, 1.7443372702334489579d-9, &
     &    1.1596478963485415499d-7, 2.1446755518623035147d-6, &
     &    4.0697440347437076195d-5, 5.6324394900433192204d-4, &
     &    5.9283484996093060678d-3, 4.4440673899150997921d-2, &
     &    2.2222638016852657860d-1, 6.6666358151576732094d-1, &
     &    1.0000013834029985337d0, 4.9999971643129650249d-1, &
     &    3.1013758938255172562d-10, -8.4813676145611694984d-10, &
     &    1.5544980187411802596d-7, 1.7811109378708045726d-6, &
     &    4.2945322199060856985d-5, 5.5344850176852353639d-4, &
     &    5.9590327716950614802d-3, 4.4371611097707060659d-2, &
     &    2.2233578241986401111d-1, 6.6654747300463315310d-1, &
     &    1.0000756505206705927d0, 4.9997803664415994554d-1, &
     &    4.1214758313965020365d-10, -5.3613317735347429440d-9, &
     &    2.4661360807517345161d-7, 6.7144593918926723203d-7, &
     &    5.1988027944945587571d-5, 5.0165568586065803067d-4, &
     &    6.1717530047005289953d-3, 4.3745229577317251404d-2, &
     &    2.2363147971477747996d-1, 6.6475469131117660240d-1, &
     &    1.0015686689447547657d0, 4.9941120439785391891d-1 /)

      real, parameter :: b(0:69) = (/ &
     &    6.6324787943143095845d-8, 4.5125928898466638619d-7, &
     &    6.7937793134877246623d-6, 7.4580507871505926302d-5, &
     &    7.6866382927334005919d-4, 7.1185174803491859307d-3, &
     &    5.8721838073486424416d-2, 4.2473949281714196041d-1, &
     &    2.6396965606282079123d0, 13.710008536637016903d0, &
     &    57.158647688180932003d0, 179.46182892089389037d0, &
     &    377.57997362398478619d0, 399.87313678256009819d0, & 
     &    1.7652713206027939711d-7, 1.1988179244834708057d-6, &
     &    1.8037851545747139231d-5, 1.9775785516370314656d-4, &
     &    2.0354870702829387283d-3, 1.8822164191032253600d-2, &
     &    1.5500485219010424263d-1, 1.1190100010560573210d0, &
     &    6.9391565185406617552d0, 35.948170579648649345d0, &
     &    149.41909525103032616d0, 467.42979492780642582d0, &
     &    979.04227423171290408d0, 1030.9147225169564443d0, &  
     &    4.7022299276154507603d-7, 3.1878571710170115972d-6, &
     &    4.7940153875711448496d-5, 5.2496623508411440227d-4, &
     &    5.3968661134780824779d-3, 4.9837081920693776234d-2, &
     &    4.0979593830387765545d-1, 2.9533186922862948404d0, &
     &    18.278176130722516369d0, 94.476497150189121070d0, &
     &    391.66075612645333624d0, 1221.4182034643210345d0, &
     &    2548.6177980961291004d0, 2670.9883037012546541d0, &
     &    1.2535083724002034147d-6, 8.4845871420655708250d-6, & 
     &    1.2753227372734042108d-4, 1.3950105363562648921d-3, &
     &    1.4325473993765291906d-2, 1.3212452778932829125d-1, &
     &    1.0849287786885151432d0, 7.8068089156260172673d0, &
     &    48.232254570679165833d0, 248.80659424902394371d0, &
     &    1029.0736929484210803d0, 3200.5629438795801652d0, &
     &    6656.7749162019607914d0, 6948.8586598121632302d0, &
     &    3.3439394490599745013d-6, 2.2600596902211837757d-5, & 
     &    3.3955927589987356838d-4, 3.7105306061050972474d-3, &
     &    3.8065263634919156421d-2, 3.5068223415665236079d-1, &
     &    2.8760027832105027316d0, 20.665999500843274339d0, &
     &    127.47939148516390205d0, 656.43636874254000885d0, &
     &    2709.5242837932479920d0, 8407.1174233600734871d0, &
     &    17437.146284159740233d0, 18141.348781638831600d0 /) 

      real, parameter :: c(0:44) = (/ & 
     &    -2.8849790431465382128d-15, -3.5125350943844774657d-14, &
     &    -7.4850867013707419750d-13, -1.8383904048277485153d-11, &
     &    -5.7303556446977223342d-10, -2.4449502737311496525d-8, &
     &    -1.6765373351766929724d-6, -3.2189516835265773471d-4, &
     &    5.1503226936425277377d-2, -5.8674306822281631119d-15, &
     &    -9.4884898451194085565d-15, -8.5033865136600364340d-13, &
     &    -1.8142997866945285736d-11, -5.7340238386338193949d-10, &
     &    -2.4449138101742183665d-8, -1.6765375646678855842d-6, &
     &    -3.2189516826945356325d-4, 5.1503226936412017608d-2, & 
     &    -1.4723362506764340882d-14, 1.3945147385179042899d-13, & 
     &    -1.9618041857586930923d-12, -1.3343606394065121821d-11, &
     &    -5.8649674606973244159d-10, -2.4426060539669553778d-8, &
     &    -1.6765631828366988006d-6, -3.2189515191449587253d-4, &
     &    5.1503226931820146445d-2, -5.8203519372580372987d-14, &
     &    1.2266326995309845825d-12, -1.3921625844526453237d-11, &
     &    6.2228025878281625469d-11, -8.8636681342142794023d-10, &
     &    -2.3661241616744818608d-8, -1.6777870960740520557d-6, &
     &    -3.2189402882677074318d-4, 5.1503226479551959376d-2, &
     &    -4.5801527369223291722d-14, 6.7998819697143727209d-13, & 
     &    -4.1624857909290468421d-12, -3.2849009406112440998d-11, &
     &    -3.2478275690431118270d-10, -2.5739209934053714983d-8, &
     &    -1.6730566573215739195d-6, -3.2190010909008684076d-4, &
     &    5.1503229866932077150d-2 /) 
      w = abs(x)
      if (w .lt. 8.5d0) then
          t = w * w * 0.0625d0
          k = 12 * (int(t))
          y = (((((((((((a(k) * t + a(k + 1)) * t + &
             a(k + 2)) * t + a(k + 3)) * t + a(k + 4)) * t + &
             a(k + 5)) * t + a(k + 6)) * t + a(k + 7)) * t + &
             a(k + 8)) * t + a(k + 9)) * t + a(k + 10)) * t + &
             a(k + 11)) * w
      else if (w .lt. 12.5d0) then
          k = int(w)
          t = w - k
          k = 14 * (k - 8)
          y = ((((((((((((b(k) * t + b(k + 1)) * t + &
             b(k + 2)) * t + b(k + 3)) * t + b(k + 4)) * t + &
             b(k + 5)) * t + b(k + 6)) * t + b(k + 7)) * t + &
             b(k + 8)) * t + b(k + 9)) * t + b(k + 10)) * t + &
             b(k + 11)) * t + b(k + 12)) * t + b(k + 13)
      else
          t = 60 / w
          k = 9 * (int(t))
          y = ((((((((c(k) * t + c(k + 1)) * t + &
             c(k + 2)) * t + c(k + 3)) * t + c(k + 4)) * t + &
             c(k + 5)) * t + c(k + 6)) * t + c(k + 7)) * t + &
             c(k + 8)) * sqrt(t) * exp(w)
      end if
      if (x .lt. 0) y = -y
      i1 = y
      
   end function i1

# if SPFUNC == _SPLOCAL_

   !-------------------------------------------------------------------------!
   ! double precision Bessel functions (dbesj0.f dbesj1.f)                   !
   ! http://www.kurims.kyoto-u.ac.jp/~ooura/bessel.html                      !
   !-------------------------------------------------------------------------!
   ! Copyright(C) 1996 Takuya OOURA (email: ooura@mmm.t.u-tokyo.ac.jp).      !
   ! You may use, copy, modify this code for any purpose and                 !
   ! without fee. You may distribute this ORIGINAL package.                  !
   !-------------------------------------------------------------------------!
   ! Modified by Ryusuke NUMATA 2008/06/27                                   !
   !  to fit F90 format, and for j1 to give besj1/x                          !
   !-------------------------------------------------------------------------!

   ! these routines are declared as real, but can be promoted to
   ! double presicion using compiler option.
   ! this is so because constatns used are only double precision,
   ! and cannot be promoted to quad-precision.

   ! differences from GNU gfortran besj0 and besj1 are
   ! |err| < 1.e-15

   elemental function j0(x)

      ! Bessel J_0(x) function in double precision
      use constants, only: pi
      real :: j0
      real, intent(in) :: x
      integer :: k
      real :: w, t, y, theta, v

      real, parameter :: a(0:7) = (/ &
           & -0.0000000000023655394, 0.0000000004708898680, &
           & -0.0000000678167892231, 0.0000067816840038636, &
           & -0.0004340277777716935, 0.0156249999999992397, &
           & -0.2499999999999999638, 0.9999999999999999997/)

      real, parameter :: b(0:64) = (/ &
           &  0.0000000000626681117, -0.0000000022270614428, &
           &  0.0000000662981656302, -0.0000016268486502196, &
           &  0.0000321978384111685, -0.0005005237733315830, &
           &  0.0059060313537449816, -0.0505265323740109701, &
           &  0.2936432097610503985, -1.0482565081091638637, &
           &  1.9181123286040428113, -1.1319199475221700100, &
           & -0.1965480952704682000, 0.0000000000457457332, &
           & -0.0000000015814772025, 0.0000000455487446311, &
           & -0.0000010735201286233, 0.0000202015179970014, &
           & -0.0002942392368203808, 0.0031801987726150648, &
           & -0.0239875209742846362, 0.1141447698973777641, &
           & -0.2766726722823530233, 0.1088620480970941648, &
           &  0.5136514645381999197, -0.2100594022073706033, &
           &  0.0000000000331366618, -0.0000000011119090229, &
           &  0.0000000308823040363, -0.0000006956602653104, &
           &  0.0000123499947481762, -0.0001662951945396180, &
           &  0.0016048663165678412, -0.0100785479932760966, &
           &  0.0328996815223415274, -0.0056168761733860688, &
           & -0.2341096400274429386, 0.2551729256776404262, &
           &  0.2288438186148935667, 0.0000000000238007203, &
           & -0.0000000007731046439, 0.0000000206237001152, &
           & -0.0000004412291442285, 0.0000073107766249655, &
           & -0.0000891749801028666, 0.0007341654513841350, &
           & -0.0033303085445352071, 0.0015425853045205717, &
           &  0.0521100583113136379, -0.1334447768979217815, &
           & -0.1401330292364750968, 0.2685616168804818919, &
           &  0.0000000000169355950, -0.0000000005308092192, &
           &  0.0000000135323005576, -0.0000002726650587978, &
           &  0.0000041513240141760, -0.0000443353052220157, &
           &  0.0002815740758993879, -0.0004393235121629007, &
           & -0.0067573531105799347, 0.0369141914660130814, &
           &  0.0081673361942996237, -0.2573381285898881860, &
           &  0.0459580257102978932/)

      real, parameter :: c(0:69) = (/ &
           & -0.00000000003009451757, -0.00000000014958003844, &
           &  0.00000000506854544776, 0.00000001863564222012, &
           & -0.00000060304249068078, -0.00000147686259937403, &
           &  0.00004714331342682714, 0.00006286305481740818, &
           & -0.00214137170594124344, -0.00089157336676889788, &
           &  0.04508258728666024989, -0.00490362805828762224, &
           & -0.27312196367405374426, 0.04193925184293450356, &
           & -0.00000000000712453560, -0.00000000041170814825, &
           &  0.00000000138012624364, 0.00000005704447670683, &
           & -0.00000019026363528842, -0.00000533925032409729, &
           &  0.00001736064885538091, 0.00030692619152608375, &
           & -0.00092598938200644367, -0.00917934265960017663, &
           &  0.02287952522866389076, 0.10545197546252853195, &
           & -0.16126443075752985095, -0.19392874768742235538, &
           &  0.00000000002128344556, -0.00000000031053910272, &
           & -0.00000000334979293158, 0.00000004507232895050, &
           &  0.00000036437959146427, -0.00000446421436266678, &
           & -0.00002523429344576552, 0.00027519882931758163, &
           &  0.00097185076358599358, -0.00898326746345390692, &
           & -0.01665959196063987584, 0.11456933464891967814, &
           &  0.07885001422733148815, -0.23664819446234712621, &
           &  0.00000000003035295055, 0.00000000005486066835, &
           & -0.00000000501026824811, -0.00000000501246847860, &
           &  0.00000058012340163034, 0.00000016788922416169, &
           & -0.00004373270270147275, 0.00001183898532719802, &
           &  0.00189863342862291449, -0.00113759249561636130, &
           & -0.03846797195329871681, 0.02389746880951420335, &
           &  0.22837862066532347461, -0.06765394811166522844, &
           &  0.00000000001279875977, 0.00000000035925958103, &
           & -0.00000000228037105967, -0.00000004852770517176, &
           &  0.00000028696428000189, 0.00000440131125178642, &
           & -0.00002366617753349105, -0.00024412456252884129, &
           &  0.00113028178539430542, 0.00708470513919789080, &
           & -0.02526914792327618386, -0.08006137953480093426, &
           &  0.16548380461475971846, 0.14688405470042110229/)

      real, parameter :: d(0:51) = (/ &
           &  1.059601355592185731e-14, -2.71150591218550377e-13,   &
           &  8.6514809056201638e-12, -4.6264028554286627e-10,    &
           &  5.0815403835647104e-8, -1.76722552048141208e-5,    &
           &  0.16286750396763997378, 2.949651820598278873e-13,  &
           & -8.818215611676125741e-12, 3.571119876162253451e-10,  &
           & -2.631924120993717060e-8, 4.709502795656698909e-6,   &
           & -5.208333333333283282e-3, 7.18344107717531977e-15,   &
           & -2.51623725588410308e-13, 8.6017784918920604e-12,    &
           & -4.6256876614290359e-10, 5.0815343220437937e-8,     &
           & -1.76722551764941970e-5, 0.16286750396763433767,    &
           &  2.2327570859680094777e-13, -8.464594853517051292e-12,  &
           &  3.563766464349055183e-10, -2.631843986737892965e-8,   &
           &  4.709502342288659410e-6, -5.2083333332278466225e-3,  &
           &  5.15413392842889366e-15, -2.27740238380640162e-13,   &
           &  8.4827767197609014e-12, -4.6224753682737618e-10,    &
           &  5.0814848128929134e-8, -1.76722547638767480e-5,    &
           &  0.16286750396748926663, 1.7316195320192170887e-13, &
           & -7.971122772293919646e-12, 3.544039469911895749e-10,  &
           & -2.631443902081701081e-8, 4.709498228695400603e-6,   &
           & -5.2083333315143653610e-3, 3.84653681453798517e-15,   &
           & -2.04464520778789011e-13, 8.3089298605177838e-12,    &
           & -4.6155016158412096e-10, 5.0813263696466650e-8,     &
           & -1.76722528311426167e-5, 0.16286750396650065930,    &
           &  1.3797879972460878797e-13, -7.448089381011684812e-12,  &
           &  3.512733797106959780e-10, -2.630500895563592722e-8,   &
           &  4.709483934775839193e-6, -5.2083333227940760113e-3/)

      w = abs(x)
      if (w < 1) then
         t = w * w
         y = ((((((a(0) * t + a(1)) * t + &
              & a(2)) * t + a(3)) * t + a(4)) * t + &
              & a(5)) * t + a(6)) * t + a(7)
      else if (w < 8.5) then
         t = w * w * 0.0625
         k = int(t)
         t = t - (k + 0.5)
         k = k * 13
         y = (((((((((((b(k) * t + b(k + 1)) * t + &
              & b(k + 2)) * t + b(k + 3)) * t + b(k + 4)) * t + &
              & b(k + 5)) * t + b(k + 6)) * t + b(k + 7)) * t + &
              & b(k + 8)) * t + b(k + 9)) * t + b(k + 10)) * t + &
              & b(k + 11)) * t + b(k + 12)
      else if (w < 12.5) then
         k = int(w)
         t = w - (k + 0.5)
         k = 14 * (k - 8)
         y = ((((((((((((c(k) * t + c(k + 1)) * t + &
              & c(k + 2)) * t + c(k + 3)) * t + c(k + 4)) * t + &
              & c(k + 5)) * t + c(k + 6)) * t + c(k + 7)) * t + &
              & c(k + 8)) * t + c(k + 9)) * t + c(k + 10)) * t + &
              & c(k + 11)) * t + c(k + 12)) * t + c(k + 13)
      else
         v = 24./w
         t = v * v
         k = 13 * (int(t))
         y = ((((((d(k) * t + d(k + 1)) * t + &
              & d(k + 2)) * t + d(k + 3)) * t + d(k + 4)) * t + &
              & d(k + 5)) * t + d(k + 6)) * sqrt(v)
         theta = (((((d(k + 7) * t + d(k + 8)) * t + &
              & d(k + 9)) * t + d(k + 10)) * t + d(k + 11)) * t + &
              & d(k + 12)) * v - .25 * pi
         y = y * cos(w + theta)
      end if
      j0 = y
   end function j0

   elemental function j1(x)

      ! Bessel J_1(x) function devided by x in double precision
      use constants, only: pi
      real :: j1
      real, intent(in) :: x
      integer :: k
      real :: w, t, y, theta, v

      real, parameter :: a(0:7) = (/ &
           & -0.00000000000014810349, 0.00000000003363594618, &
           & -0.00000000565140051697, 0.00000067816840144764, &
           & -0.00005425347222188379, 0.00260416666666662438, &
           & -0.06249999999999999799, 0.49999999999999999998/)
      real, parameter :: b(0:64) = (/ &
           &  0.00000000000243721316, -0.00000000009400554763,  &
           &  0.00000000306053389980, -0.00000008287270492518,  &
           &  0.00000183020515991344, -0.00003219783841164382,  &
           &  0.00043795830161515318, -0.00442952351530868999,  &
           &  0.03157908273375945955, -0.14682160488052520107,  &
           &  0.39309619054093640008, -0.47952808215101070280,  &
           &  0.14148999344027125140, 0.00000000000182119257,  &
           & -0.00000000006862117678, 0.00000000217327908360,  &
           & -0.00000005693592917820, 0.00000120771046483277,  &
           & -0.00002020151799736374, 0.00025745933218048448,  &
           & -0.00238514907946126334, 0.01499220060892984289,  &
           & -0.05707238494868888345, 0.10375225210588234727,  &
           & -0.02721551202427354117, -0.06420643306727498985,  &
           &  0.000000000001352611196, -0.000000000049706947875, &
           &  0.000000001527944986332, -0.000000038602878823401, &
           &  0.000000782618036237845, -0.000012349994748451100, &
           &  0.000145508295194426686, -0.001203649737425854162, &
           &  0.006299092495799005109, -0.016449840761170764763, &
           &  0.002106328565019748701, 0.058527410006860734650, &
           & -0.031896615709705053191, 0.000000000000997982124, &
           & -0.000000000035702556073, 0.000000001062332772617, &
           & -0.000000025779624221725, 0.000000496382962683556, &
           & -0.000007310776625173004, 0.000078028107569541842, &
           & -0.000550624088538081113, 0.002081442840335570371, &
           & -0.000771292652260286633, -0.019541271866742634199, &
           &  0.033361194224480445382, 0.017516628654559387164, &
           &  0.000000000000731050661, -0.000000000025404499912, &
           &  0.000000000729360079088, -0.000000016915375004937, &
           &  0.000000306748319652546, -0.000004151324014331739, &
           &  0.000038793392054271497, -0.000211180556924525773, &
           &  0.000274577195102593786, 0.003378676555289966782, &
           & -0.013842821799754920148, -0.002041834048574905921, &
           &  0.032167266073736023299/)

      real, parameter :: c(0:69) = (/ &
           & -0.00000000001185964494, 0.00000000039110295657, &
           &  0.00000000180385519493, -0.00000005575391345723, &
           & -0.00000018635897017174, 0.00000542738239401869, &
           &  0.00001181490114244279, -0.00033000319398521070, &
           & -0.00037717832892725053, 0.01070685852970608288, &
           &  0.00356629346707622489, -0.13524776185998074716, &
           &  0.00980725611657523952, 0.27312196367405374425, &
           & -0.00000000003029591097, 0.00000000009259293559, &
           &  0.00000000496321971223, -0.00000001518137078639, &
           & -0.00000057045127595547, 0.00000171237271302072, &
           &  0.00004271400348035384, -0.00012152454198713258, &
           & -0.00184155714921474963, 0.00462994691003219055, &
           &  0.03671737063840232452, -0.06863857568599167175, &
           & -0.21090395092505707655, 0.16126443075752985095, &
           & -0.00000000002197602080, -0.00000000027659100729, &
           &  0.00000000374295124827, 0.00000003684765777023, &
           & -0.00000045072801091574, -0.00000327941630669276, &
           &  0.00003571371554516300, 0.00017664005411843533, &
           & -0.00165119297594774104, -0.00485925381792986774, &
           &  0.03593306985381680131, 0.04997877588191962563, &
           & -0.22913866929783936544, -0.07885001422733148814, &
           &  0.00000000000516292316, -0.00000000039445956763, &
           & -0.00000000066220021263, 0.00000005511286218639, &
           &  0.00000005012579400780, -0.00000522111059203425, &
           & -0.00000134311394455105, 0.00030612891890766805, &
           & -0.00007103391195326182, -0.00949316714311443491, &
           &  0.00455036998246516948, 0.11540391585989614784, &
           & -0.04779493761902840455, -0.22837862066532347460, &
           &  0.00000000002697817493, -0.00000000016633326949, &
           & -0.00000000433134860350, 0.00000002508404686362, &
           &  0.00000048528284780984, -0.00000258267851112118, &
           & -0.00003521049080466759, 0.00016566324273339952, &
           &  0.00146474737522491617, -0.00565140892697147306, &
           & -0.02833882055679300400, 0.07580744376982855057, &
           &  0.16012275906960187978, -0.16548380461475971845/)

      real, parameter :: d(0:51) = (/ &
           & -1.272346002224188092e-14, 3.370464692346669075e-13, &
           & -1.144940314335484869e-11, 6.863141561083429745e-10, &
           & -9.491933932960924159e-8, 5.301676561445687562e-5,  &
           &  0.1628675039676399740, -3.652982212914147794e-13, &
           &  1.151126750560028914e-11, -5.165585095674343486e-10, &
           &  4.657991250060549892e-8, -1.186794704692706504e-5,  &
           &  1.562499999999994026e-2, -8.713069680903981555e-15, &
           &  3.140780373478474935e-13, -1.139089186076256597e-11, &
           &  6.862299023338785566e-10, -9.491926788274594674e-8,  &
           &  5.301676558106268323e-5, 0.1628675039676466220,    &
           & -2.792555727162752006e-13, 1.108650207651756807e-11, &
           & -5.156745588549830981e-10, 4.657894859077370979e-8,  &
           & -1.186794650130550256e-5, 1.562499999987299901e-2,  &
           & -6.304859171204770696e-15, 2.857249044208791652e-13, &
           & -1.124956921556753188e-11, 6.858482894906716661e-10, &
           & -9.491867953516898460e-8, 5.301676509057781574e-5,  &
           &  0.1628675039678191167, -2.185193490132496053e-13, &
           &  1.048820673697426074e-11, -5.132819367467680132e-10, &
           &  4.657409437372994220e-8, -1.186794150862988921e-5,  &
           &  1.562499999779270706e-2, -4.740417209792009850e-15, &
           &  2.578715253644144182e-13, -1.104148898414138857e-11, &
           &  6.850134201626289183e-10, -9.491678234174919640e-8,  &
           &  5.301676277588728159e-5, 0.1628675039690033136,    &
           & -1.755122057493842290e-13, 9.848723331445182397e-12, &
           & -5.094535425482245697e-10, 4.656255982268609304e-8,  &
           & -1.186792402114394891e-5, 1.562499998712198636e-2/)

      w = abs(x)
      if (w < 1) then
         t = w * w
!       y = (((((((a(0) * t + a(1)) * t + &
!            & a(2)) * t + a(3)) * t + a(4)) * t + &
!            & a(5)) * t + a(6)) * t + a(7)) * w
         y = ((((((a(0) * t + a(1)) * t + &
              & a(2)) * t + a(3)) * t + a(4)) * t + &
              & a(5)) * t + a(6)) * t + a(7)
      else if (w < 8.5) then
         t = w * w * 0.0625
         k = int(t)
         t = t - (k + 0.5)
         k = k * 13
!       y = ((((((((((((b(k) * t + b(k + 1)) * t + &
!            & b(k + 2)) * t + b(k + 3)) * t + b(k + 4)) * t + &
!            & b(k + 5)) * t + b(k + 6)) * t + b(k + 7)) * t + &
!            & b(k + 8)) * t + b(k + 9)) * t + b(k + 10)) * t + &
!            & b(k + 11)) * t + b(k + 12)) * w
         y = (((((((((((b(k) * t + b(k + 1)) * t + &
              & b(k + 2)) * t + b(k + 3)) * t + b(k + 4)) * t + &
              & b(k + 5)) * t + b(k + 6)) * t + b(k + 7)) * t + &
              & b(k + 8)) * t + b(k + 9)) * t + b(k + 10)) * t + &
              & b(k + 11)) * t + b(k + 12)
      else if (w < 12.5) then
         k = int(w)
         t = w - (k + 0.5)
         k = 14 * (k - 8)
!       y = ((((((((((((c(k) * t + c(k + 1)) * t + &
!            & c(k + 2)) * t + c(k + 3)) * t + c(k + 4)) * t + &
!            & c(k + 5)) * t + c(k + 6)) * t + c(k + 7)) * t + &
!            & c(k + 8)) * t + c(k + 9)) * t + c(k + 10)) * t + &
!            & c(k + 11)) * t + c(k + 12)) * t + c(k + 13)
         y = (((((((((((((c(k) * t + c(k + 1)) * t + &
              & c(k + 2)) * t + c(k + 3)) * t + c(k + 4)) * t + &
              & c(k + 5)) * t + c(k + 6)) * t + c(k + 7)) * t + &
              & c(k + 8)) * t + c(k + 9)) * t + c(k + 10)) * t + &
              & c(k + 11)) * t + c(k + 12)) * t + c(k + 13)) / w
      else
         v = 24./w
         t = v * v
         k = 13 * (int(t))
         y = ((((((d(k) * t + d(k + 1)) * t + &
              & d(k + 2)) * t + d(k + 3)) * t + d(k + 4)) * t + &
              & d(k + 5)) * t + d(k + 6)) * sqrt(v)
         theta = (((((d(k + 7) * t + d(k + 8)) * t + &
              & d(k + 9)) * t + d(k + 10)) * t + d(k + 11)) * t + &
              & d(k + 12)) * v - .25 * pi
         y = y * sin(w + theta)
!
         y = y / w
      end if
!    if (x < 0) y = -y
      j1 = y
   end function j1




   !-------------------------------------------------------------------------!
   ! double precision error functions (derf.f)                               !
   ! http://www.kurims.kyoto-u.ac.jp/~ooura/gamerf.html                      !
   !-------------------------------------------------------------------------!
   ! Copyright(C) 1996 Takuya OOURA (email: ooura@mmm.t.u-tokyo.ac.jp).      !
   ! You may use, copy, modify this code for any purpose and                 !
   ! without fee. You may distribute this ORIGINAL package.                  !
   !-------------------------------------------------------------------------!
   ! Modified by Ryusuke NUMATA 2008/06/27                                   !
   !  to fit F90 format                                                      !
   !-------------------------------------------------------------------------!

   ! these routines are declared as real, but can be promoted to
   ! double presicion using compiler option.
   ! this is so because constatns used are only double precision,
   ! and cannot be promoted to quad-precision.

   ! differences from GNU gfortran besj0 and besj1 are
   ! |err| < 1.e-15

!!$  elemental function erf(x)
!!$! A&S, p.299 7.1.28 |epsilon|<=3.e-7
!!$    implicit none
!!$    real, intent(in) :: x
!!$    real :: xerf
!!$    real, parameter, dimension(6) :: a = (/ &
!!$         0.0705230784, 0.0422820123, 0.0092705272, &
!!$         0.0001520143, 0.0002765672, 0.0000430638 /)
!!$
!!$    erf = 1.0 - 1.0/(1.0 + &
!!$         x*(a(1) + x*(a(2) + x*(a(3) + x*(a(4) + x*(a(5) + x*(a(6))))))))**16
!!$
!!$  end function erf

   elemental function erf_ext(x)

      ! error function in double precision
      real :: erf_ext
      real, intent(in) :: x
      integer :: k
      real :: w, t, y

      real, parameter :: a(0:64) = (/ &
           &  0.00000000005958930743, -0.00000000113739022964, &
           &  0.00000001466005199839, -0.00000016350354461960, &
           &  0.00000164610044809620, -0.00001492559551950604, &
           &  0.00012055331122299265, -0.00085483269811296660, &
           &  0.00522397762482322257, -0.02686617064507733420, &
           &  0.11283791670954881569, -0.37612638903183748117, &
           &  1.12837916709551257377, 0.00000000002372510631, &
           & -0.00000000045493253732, 0.00000000590362766598, &
           & -0.00000006642090827576, 0.00000067595634268133, &
           & -0.00000621188515924000, 0.00005103883009709690, &
           & -0.00037015410692956173, 0.00233307631218880978, &
           & -0.01254988477182192210, 0.05657061146827041994, &
           & -0.21379664776456006580, 0.84270079294971486929, &
           &  0.00000000000949905026, -0.00000000018310229805, &
           &  0.00000000239463074000, -0.00000002721444369609, &
           &  0.00000028045522331686, -0.00000261830022482897, &
           &  0.00002195455056768781, -0.00016358986921372656, &
           &  0.00107052153564110318, -0.00608284718113590151, &
           &  0.02986978465246258244, -0.13055593046562267625, &
           &  0.67493323603965504676, 0.00000000000382722073, &
           & -0.00000000007421598602, 0.00000000097930574080, &
           & -0.00000001126008898854, 0.00000011775134830784, &
           & -0.00000111992758382650, 0.00000962023443095201, &
           & -0.00007404402135070773, 0.00050689993654144881, &
           & -0.00307553051439272889, 0.01668977892553165586, &
           & -0.08548534594781312114, 0.56909076642393639985, &
           &  0.00000000000155296588, -0.00000000003032205868, &
           &  0.00000000040424830707, -0.00000000471135111493, &
           &  0.00000005011915876293, -0.00000048722516178974, &
           &  0.00000430683284629395, -0.00003445026145385764, &
           &  0.00024879276133931664, -0.00162940941748079288, &
           &  0.00988786373932350462, -0.05962426839442303805, &
           &  0.49766113250947636708/)

      real, parameter :: b(0:64) = (/ &
           & -0.00000000029734388465, 0.00000000269776334046, &
           & -0.00000000640788827665, -0.00000001667820132100, &
           & -0.00000021854388148686, 0.00000266246030457984, &
           &  0.00001612722157047886, -0.00025616361025506629, &
           &  0.00015380842432375365, 0.00815533022524927908, &
           & -0.01402283663896319337, -0.19746892495383021487, &
           &  0.71511720328842845913, -0.00000000001951073787, &
           & -0.00000000032302692214, 0.00000000522461866919, &
           &  0.00000000342940918551, -0.00000035772874310272, &
           &  0.00000019999935792654, 0.00002687044575042908, &
           & -0.00011843240273775776, -0.00080991728956032271, &
           &  0.00661062970502241174, 0.00909530922354827295, &
           & -0.20160072778491013140, 0.51169696718727644908, &
           &  0.00000000003147682272, -0.00000000048465972408, &
           &  0.00000000063675740242, 0.00000003377623323271, &
           & -0.00000015451139637086, -0.00000203340624738438, &
           &  0.00001947204525295057, 0.00002854147231653228, &
           & -0.00101565063152200272, 0.00271187003520095655, &
           &  0.02328095035422810727, -0.16725021123116877197, &
           &  0.32490054966649436974, 0.00000000002319363370, &
           & -0.00000000006303206648, -0.00000000264888267434, &
           &  0.00000002050708040581, 0.00000011371857327578, &
           & -0.00000211211337219663, 0.00000368797328322935, &
           &  0.00009823686253424796, -0.00065860243990455368, &
           & -0.00075285814895230877, 0.02585434424202960464, &
           & -0.11637092784486193258, 0.18267336775296612024, &
           & -0.00000000000367789363, 0.00000000020876046746, &
           & -0.00000000193319027226, -0.00000000435953392472, &
           &  0.00000018006992266137, -0.00000078441223763969, &
           & -0.00000675407647949153, 0.00008428418334440096, &
           & -0.00017604388937031815, -0.00239729611435071610, &
           &  0.02064129023876022970, -0.06905562880005864105, &
           &  0.09084526782065478489/)

      w = abs(x)
      if (w < 2.2) then
         t = w * w
         k = int(t)
         t = t - k
         k = k * 13
         y = ((((((((((((a(k) * t + a(k + 1)) * t + &
              & a(k + 2)) * t + a(k + 3)) * t + a(k + 4)) * t + &
              & a(k + 5)) * t + a(k + 6)) * t + a(k + 7)) * t + &
              & a(k + 8)) * t + a(k + 9)) * t + a(k + 10)) * t + &
              & a(k + 11)) * t + a(k + 12)) * w
      else if (w < 6.9) then
         k = int(w)
         t = w - k
         k = 13 * (k - 2)
         y = (((((((((((b(k) * t + b(k + 1)) * t + &
              & b(k + 2)) * t + b(k + 3)) * t + b(k + 4)) * t + &
              & b(k + 5)) * t + b(k + 6)) * t + b(k + 7)) * t + &
              & b(k + 8)) * t + b(k + 9)) * t + b(k + 10)) * t + &
              & b(k + 11)) * t + b(k + 12)
         y = y * y
         y = y * y
         y = y * y
         y = 1.-y * y
      else
         y = 1.
      end if
      if (x < 0.) y = -y
      erf_ext = y
   end function erf_ext

   !-------------------------------------------------------------------------!

# elif SPFUNC == _SPNAG_ /* if SPFUNC != _SPLOCAL_ */

   function j0(x)
      real :: j0
      real, intent(in) :: x
# if NAG_PREC == _NAGDBLE_
      real(kind=nag_kind), external :: s17aef ! bessel J0 double
# elif NAG_PREC == _NAGSNGL_
      real(kind=nag_kind), external :: s17aee ! bessel J0 single
# endif /* NAG_PREC */
      real(kind=nag_kind) :: xarg
      xarg = x
# if NAG_PREC == _NAGDBLE_
      j0 = s17aef(xarg, ifail)
# elif NAG_PREC == _NAGSNGL_
      j0 = s17aee(xarg, ifail)
# endif /* NAG_PREC */
   end function j0

   function j1(x)
      real :: j1
      real, intent(in) :: x
# if NAG_PREC == _NAGDBLE_
      real(kind=nag_kind), external :: s17aff ! bessel J1 double
# elif NAG_PREC == _NAGSNGL_
      real(kind=nag_kind), external :: s17afe ! bessel J1 single
# endif /* NAG_PREC */
      real(kind=nag_kind) :: xarg
      xarg = x
# if NAG_PREC == _NAGDBLE_
      j1 = s17aff(xarg, ifail)
# elif NAG_PREC == _NAGSNGL_
      j1 = s17afe(xarg, ifail)
# endif /* NAG_PREC */

      if (x == 0.) then
         j1 = .5
      else
         j1 = j1 / x
      end if
   end function j1

   function erf_ext(x)
      real :: erf_ext
      real, intent(in) :: x
# if NAG_PREC == _NAGDBLE_
      real(kind=nag_kind), external :: s15aef ! error function double
# elif NAG_PREC == _NAGSNGL_
      real(kind=nag_kind), external :: s15aee ! error function single
# endif /* NAG_PREC */
      real(kind=nag_kind) :: xarg
      xarg = x
# if NAG_PREC == _NAGDBLE_
      erf_ext = s15aef(xarg, ifail)
# elif NAG_PREC == _NAGSNGL_
      erf_ext = s15aee(xarg, ifail)
# endif /* NAG_PREC */
   end function erf_ext

# else /* if SPFUNC != _SPLOCAL_ && SPFUNC != _SPNAG_*/

# if (FCOMPILER == _G95_ || FCOMPILER == _GFORTRAN_ \
   ||FCOMPILER == _PATHSCALE_||FCOMPILER == _INTEL_)

# if FCOMPILER == _INTEL_
   function sj0(x)
      use ifport, only: besj0
# else
      elemental function sj0(x)
# endif
         real(kind=kind_rs), intent(in) :: x
         real(kind=kind_rs) :: sj0
         sj0 = besj0(x)
      end function sj0

# if FCOMPILER == _INTEL_
      function dj0(x)
         use ifport, only: dbesj0
# else
         elemental function dj0(x)
# endif
            real(kind=kind_rd), intent(in) :: x
            real(kind=kind_rd) :: dj0
            dj0 = dbesj0(x)
         end function dj0

# if FCOMPILER == _INTEL_
         function sj1(x)
            use ifport, only: besj1
# else
            elemental function sj1(x)
# endif
               real(kind=kind_rs), intent(in) :: x
               real(kind=kind_rs) :: sj1
               if (x == 0.0) then
                  sj1 = 0.5
               else
                  sj1 = besj1(x) / x
               end if
            end function sj1

# if FCOMPILER == _INTEL_
            function dj1(x)
               use ifport, only: dbesj1
# else
               elemental function dj1(x)
# endif
                  real(kind=kind_rd), intent(in) :: x
                  real(kind=kind_rd) :: dj1
                  if (x == 0.0) then
                     dj1 = 0.5
                  else
                     dj1 = dbesj1(x) / x
                  end if
               end function dj1

# if FCOMPILER == _G95_

               function erf_ext(x)
                  real, intent(in) :: x
                  real :: erf_ext
                  erf_ext = erf(x)
               end function erf_ext

# else /* if FCOMPILER != _G95_ */

# if FCOMPILER == _INTEL_
               function serf_ext(x)
# else
                  elemental function serf_ext(x)
# endif /* if FCOMPILER == _INTEL_ */
                     real(kind=kind_rs), intent(in) :: x
                     real(kind=kind_rs) :: serf_ext
                     serf_ext = erf(x)
                  end function serf_ext

# if FCOMPILER == _INTEL_
                  function derf_ext(x)
# else
                     elemental function derf_ext(x)
# endif
                        real(kind=kind_rd), intent(in) :: x
                        real(kind=kind_rd) :: derf_ext
                        derf_ext = derf(x)
                     end function derf_ext

# endif /* if FCOMPILER == _G95_ */

# elif FCOMPILER == _PGI_ /* if (FCOMPILER != one of _G95_, _GFORTRAN_, _INTEL_, _PATHSCALE_) */

                     elemental function j1(x)
                        real, intent(in) :: x
                        real :: j1
                        interface besj1
                           elemental function besj1(x)
                              real(kind=4), intent(in) :: x
                              real(kind=4) :: besj1
                           end function besj1
                           elemental function dbesj1(x)
                              real(kind=8), intent(in) :: x
                              real(kind=8) :: dbesj1
                           end function dbesj1
                        end interface
                        if (x == 0.0) then
                           j1 = 0.5
                        else
                           j1 = besj1(x) / x
                        end if
                     end function j1

# endif /* if FCOMPILER */

# endif /* if SPFUNC */




end module spfunc
